//有阈值，超过阈值才能动。
//如果连续不停下，则指令角度一直累计，可以超过±2pi的过零处理。
//停下就进行指令累计清零。
static void VectorWheel_ControlModel(Twist_t twist)  
{
	float vx , vy ,
				temp ;
	
	/* --- threshold --- */
	if( fabs(twist.linear.x) <= wtrcfg_CHASSIS_CONTROL_THRESHOLD_X )
		twist.linear.x = 0;
	if( fabs(twist.linear.y) <= wtrcfg_CHASSIS_CONTROL_THRESHOLD_Y )
		twist.linear.y = 0; 
	if( fabs(twist.angular.z) <= wtrcfg_CHASSIS_CONTROL_THRESHOLD_Z )
		twist.angular.z = 0;
	
	if( (twist.linear.x == 0) && (twist.linear.y ==0) ){
		/* --- only velocity == 0 , access to turn --- */
		if( twist.angular.z != 0 ){
			for(int i=0;i<4;++i){		
				vx = twist.angular.z * wtcl[i] * cosf(woac[i]);
				vy = twist.angular.z * wtcl[i] * sinf(woac[i]);
				/* -- update last value -- */
				command_theta_last[i] = command_theta_now[i] ;
				/* -- calculate angle to turn -- */
				command_theta_now[i] = atan2f( vy,vx ) - wtrcfg_PI/2 ;
				if( (command_theta_now[i] - command_theta_last[i]) > wtrcfg_PI/2)
					--command_theta_round[i];
				if( (command_theta_now[i] - command_theta_last[i]) < - wtrcfg_PI/2)
					++command_theta_round[i];
				command_theta[i] = command_theta_now[i] + command_theta_round[i] * 2 * wtrcfg_PI ;
				/* - update motor.turn pid ref - */
	/**/  chassis.wheel[i].turn.ctrl[wtrcfg_PID_x].ref = command_theta[i] * wtrcfg_CHASSISMODEL_GEAR_RATE;
				
				/* -- calculate velocity to roll -- */
				temp = sqrtf( vx*vx + vy*vy );
				/* - update motor.roll pid ref - */
	/**/  chassis.wheel[i].roll.ctrl[wtrcfg_PID_v].ref = temp;
			}
		}else{
			/* --- all zero --- */
			for(int i=0;i<4;++i){		
				/* -- update last value -- */
				command_theta[i] = command_theta_last[i] = command_theta_now[i] = command_theta_round[i] = 0 ;
				/* - update motor.turn pid ref - */
	/**/  chassis.wheel[i].turn.ctrl[wtrcfg_PID_x].ref = 0;
				/* - update motor.roll pid ref - */
	/**/  chassis.wheel[i].roll.ctrl[wtrcfg_PID_v].ref = 0;
			}
		}
	}else{
		/* --- translation  --- */	
		vx = twist.linear.x;
		vy = twist.linear.y;
		/* -- calculate angle to turn -- */
		/* - atan2f(y,x)~(-Π,Π] - */
		temp = atan2f( vy,vx ) - wtrcfg_PI/2 ;
	
		for(int i=0;i<4;++i){
			/* -- update last value -- */
			command_theta_last[i] = command_theta_now[i] ;
			command_theta_now[i] = temp ;
			if( (command_theta_now[i] - command_theta_last[i]) > wtrcfg_PI/2)
				--command_theta_round[i];
			if( (command_theta_now[i] - command_theta_last[i]) < - wtrcfg_PI/2)
				++command_theta_round[i];
			command_theta[i] = command_theta_now[i] + command_theta_round[i] * 2 * wtrcfg_PI ;
			/* - update motor.turn pid ref - */
/**/  chassis.wheel[i].turn.ctrl[wtrcfg_PID_x].ref = command_theta[i] * wtrcfg_CHASSISMODEL_GEAR_RATE;
			
			/* -- calculate velocity to roll -- */
			/* - update motor.roll pid ref - */
/**/  chassis.wheel[i].roll.ctrl[wtrcfg_PID_v].ref = sqrtf( vx*vx + vy*vy ) ;
		}
  }
}







static void VectorWheel_ControlModel(Twist_t twist)  //记得测试计算时间。
{
	float vomega ,
				vx , vy ,
				temp ;
	for(int i=0;i<4;++i)
  {		
		/* --- update last value --- */
		wheel_theta_last[i] = wheel_theta_now[i] ;
		
		/* --- calculate angle to turn --- */
		vomega = wtcl[i] * twist.angular.z ;
		vx = vomega * cosf(woac[i]) + twist.linear.x ;
		vy = vomega * sinf(woac[i]) + twist.linear.y ;
		/* -- atan2f(y,x)~(-Π,Π] -- */
		wheel_theta_now[i] = atan2f( vy,vx ) - wtrcfg_PI/2 ;
		if( (wheel_theta_now[i] - wheel_theta_last[i]) > wtrcfg_PI/2)
			++wheel_theta_round[i];
		if( (wheel_theta_now[i] - wheel_theta_last[i]) < - wtrcfg_PI/2)
			--wheel_theta_round[i];
		wheel_theta[i] = wheel_theta_now[i] + wheel_theta_round[i] * 2 * wtrcfg_PI ;
		/* -- update motor.turn pid ref -- */
/**/chassis.wheel[i].turn.ctrl[wtrcfg_PID_x].ref = wheel_theta[i] * wtrcfg_CHASSISMODEL_GEAR_RATE;
		
		/* --- calculate velocity to roll --- */
	  temp = sqrtf( vx*vx + vy*vy );
		/* -- update motor.roll pid ref -- */
/**/chassis.wheel[i].roll.ctrl[wtrcfg_PID_v].ref = temp;
  }
}











//	float omega,velocity,theta,temp;
//	
//	omega = twist.angular.z;
//	velocity = sqrtf( twist.linear.x * twist.linear.x + twist.linear.y * twist.linear.y ); 
//	theta = atan2f( twist.linear.y , twist.linear.x );
//	//todo list ：用atan2f过0处理需要搞以下，不然轮子会回转。
//	for(int i=0;i<4;++i)
//  {		
//		/* --- update motor.turn pid --- */
//		chassis.wheel[i].turn.ctrl[wtrcfg_PID_x].ref = atan2f( ( omega * wtrcfg_CHASSISMODEL_AFA * sinf(Delta[i]) + sinf(theta) ) , 
//																													 ( omega * wtrcfg_CHASSISMODEL_AFA * cosf(Delta[i]) + cosf(theta) )
//																												 ) * wtrcfg_CHASSISMODEL_GEAR_RATE;
//		/* --- update motor.roll pid --- */
//	  temp = sqrtf( pow(omega*wtrcfg_CHASSISMODEL_AFA,2) + velocity*velocity + 2*velocity*omega*wtrcfg_CHASSISMODEL_AFA*cosf(Delta[i]-theta));
//		chassis.wheel[i].roll.ctrl[wtrcfg_PID_v].ref = velocity > 0 ? temp : -temp ;
//  }
	



















// Created by chrisliu on 2019/9/25.
//

#include "ros/ros.h"
#include <iostream>
#include <algorithm>
#include "steeringwheel.h"
#include <std_msgs/Float32.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/TwistStamped.h>
#include <std_msgs/Float32MultiArray.h>

#include <math.h>

using namespace std;

ros::Publisher S0;
ros::Publisher M0;
ros::Publisher S1;
ros::Publisher M1;
ros::Publisher S2;
ros::Publisher M2;
ros::Publisher S3;
ros::Publisher M3;

void vector_control(float &vel_target, float &theta_target_rad, float theta_now_rad) {
    int theta_target = theta_target_rad * 180 / PI;
    int theta_now_degree = theta_now_rad * 180 / PI;
    int delta1 = theta_target - theta_now_degree;
    int delta2 = (theta_target + 180) % (360) - theta_now_degree;
    int delta1_abs = abs(delta1);
    int delta2_abs = abs(delta2);
    if (delta1_abs > 180) {
        delta1_abs = 360 - delta1_abs;
    }
    if (delta2_abs > 180) {
        delta2_abs = 360 - delta2_abs;
    }
    if (delta1_abs < delta2_abs) {
        theta_target_rad = (float) theta_target / 180 * PI;
        vel_target = vel_target;
    } else {
        theta_target_rad = (float) ((theta_target + 180) % (360)) / 180 * PI;
        vel_target = -vel_target;
    }
}

std_msgs::Float32MultiArray wheel_angles;
void wheelangles_callback(const std_msgs::Float32MultiArray::ConstPtr &wheelangles_msg) {
        wheel_angles = *wheelangles_msg;
}

void keyboard_callback(const geometry_msgs::Twist::ConstPtr &keyboard) {
    float vel = sqrt(pow(keyboard->linear.x, 2) + pow(keyboard->linear.y, 2));
    float angular = atan2(keyboard->linear.y, keyboard->linear.x) + PI / 2;

    fwc(vel, angular, keyboard->angular.z);
    std_msgs::Float32 speed[4], steer[4];
    for (int i = 0; i < 4; i++) {
        vector_control(wheel.w_vol[i], wheel.w_angle[i], wheel_angles.data[i]);
        speed[i].data = wheel.w_vol[i];
        steer[i].data = wheel.w_angle[i];
    }

    M0.publish(speed[0]);
    S0.publish(steer[0]);
    M1.publish(speed[1]);
    S1.publish(steer[1]);
    M2.publish(speed[2]);
    S2.publish(steer[2]);
    M3.publish(speed[3]);
    S3.publish(steer[3]);
}

int main(int argc, char **argv) {
    ros::init(argc, argv, "SteeringWheel");//初始化ROS节点
    ros::NodeHandle n;

    ros::Subscriber sub_wheelangles = n.subscribe("/wheel_angles", 1, wheelangles_callback);
    ros::Subscriber sub_keyboard = n.subscribe("/cmd_vel", 1, keyboard_callback);

    S0 = n.advertise<std_msgs::Float32>("/FrontRight_SteerMotor", 1);
    M0 = n.advertise<std_msgs::Float32>("/FrontRight_MoveMotor", 1);
    S1 = n.advertise<std_msgs::Float32>("/BackRight_SteerMotor", 1);
    M1 = n.advertise<std_msgs::Float32>("/BackRight_MoveMotor", 1);
    S2 = n.advertise<std_msgs::Float32>("/BackLeft_SteerMotor", 1);
    M2 = n.advertise<std_msgs::Float32>("/BackLeft_MoveMotor", 1);
    S3 = n.advertise<std_msgs::Float32>("/FrontLeft_SteerMotor", 1);
    M3 = n.advertise<std_msgs::Float32>("/FrontLeft_MoveMotor", 1);


    while (ros::ok()) {
        ros::spinOnce();
    }
    return 0;
}

